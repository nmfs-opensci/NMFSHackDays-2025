{
  "hash": "4ca834248e256007efa57b4da1866a6e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Introduction to Geospatial Analyses in R in the Cloud\nauthor: Carl Boettiger and adapted by Eli Holmes\n---\n\n\nThis is based on the \"Examining Environmental Justice through Open Source, Cloud-Native Tools\" notebook from Carl Boettiger. Please follow [Carl's notebook](https://boettiger-lab.github.io/nasa-topst-env-justice/tutorials/R/1-intro-R.html) for the background. This tutorial just focuses on the code.\n\n## Set up\n\nYou will need to install the newest version of tmap. Restart R a few times after installing. You don't need to update other packages.\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github('r-tmap/tmap')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstac)\nlibrary(gdalcubes)\nlibrary(stars)\nlibrary(tmap)\nlibrary(dplyr)\ngdalcubes::gdalcubes_options(parallel = TRUE)\n```\n:::\n\n\n## Data discovery\n\nHere we use a [STAC](https://stacspec.org/en) Catalog API to recover a list of candidate data. \nThis example searches for images in a lon-lat bounding box from a collection of Cloud-Optimized-GeoTIFF (COG) images taken by Sentinel2 satellite mission. This function will not download any imagery, it merely gives us a list of metadata about available images.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbox <- c(xmin=-122.51, ymin=37.71, xmax=-122.36, ymax=37.81) \nstart_date <- \"2022-06-01\"\nend_date <- \"2022-08-01\"\nitems <-\n  stac(\"https://earth-search.aws.element84.com/v0/\") |>\n  stac_search(collections = \"sentinel-s2-l2a-cogs\",\n              bbox = box,\n              datetime = paste(start_date, end_date, sep=\"/\"),\n              limit = 100) |>\n  ext_query(\"eo:cloud_cover\" < 20) |>\n  post_request()\n```\n:::\n\n\nWe pass this list of images to a high-level utilty (`gdalcubes`) that will do all of the heavy lifting:\n\n* subsetting by date\n* subsetting by bounding box\n* aggregating by time `P1D`\n* reproject into the desired coordinate system\n* resampling to a desired spatial resolution\n* resample from images in overlapping areas to replace pixels masked by clouds\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- stac_image_collection(items$features, asset_names = c(\"B08\", \"B04\", \"SCL\"))\n\ncube <- cube_view(srs =\"EPSG:4326\",\n                  extent = list(t0 = start_date, t1 = end_date,\n                                left = box[1], right = box[3],\n                                top = box[4], bottom = box[2]),\n                  dx = 0.0001, dy = 0.0001, dt = \"P1D\",\n                  aggregation = \"median\", resampling = \"average\")\n\nmask <- image_mask(\"SCL\", values=c(3, 8, 9)) # mask clouds and cloud shadows\n\ndata <-  raster_cube(col, cube, mask = mask)\n```\n:::\n\n\n\nCalculate NDVI, a widely used measure of greenness that can be used to determine tree cover. The R example uses lazy evaluation, and can thus perform these calculations while streaming.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- data |>\n  select_bands(c(\"B04\", \"B08\")) |>\n  apply_pixel(\"(B08-B04)/(B08+B04)\", \"NDVI\") |>\n  reduce_time(c(\"mean(NDVI)\"))\n\nndvi_stars <- st_as_stars(ndvi)\n```\n:::\n\n\n\nPlot the result.  The long rectangle of Golden Gate Park is clearly visible in the North-West.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmako <- tm_scale_continuous(values = viridisLite::mako(30))\nfill <- tm_scale_continuous(values = \"Greens\")\n\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako)\n```\n\n::: {.cell-output-display}\n![](Intro_to_Cloud_R_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n# From NDVI to Environmental Justice\n\nAdd the 1937 \"red-lining\" zones from the [Mapping Inequality](https://dsl.richmond.edu/panorama/redlining) project.  The red-lined zones are spatial vectors. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf <- st_read(\"/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/citiesData/CASanFrancisco1937/geojson.json\") |>\n  st_make_valid() |>\n  select(grade)\npoly <- ndvi |> extract_geom(sf, FUN = mean, reduce_time = TRUE)\nsf$NDVI <- poly$NDVI\n```\n:::\n\n\nWe plot the underlying NDVI as well as the average NDVI of each polygon, along with it's textual grade, using `tmap`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(ndvi_stars) + tm_raster(col.scale = mako) +\n  tm_shape(sf) + tm_polygons('NDVI', fill.scale = fill) +\n  tm_shape(sf) + tm_text(\"grade\", col=\"darkblue\", size=0.6) +\n  tm_legend_hide()\n```\n\n::: {.cell-output-display}\n![](Intro_to_Cloud_R_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nCalculate the mean current greenness by red-line zone grade.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsf |> \n  as_tibble() |>\n  group_by(grade) |> \n  summarise(ndvi = mean(NDVI), \n            sd = sd(NDVI)) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|grade |      ndvi|        sd|\n|:-----|---------:|---------:|\n|A     | 0.3201204| 0.0611414|\n|B     | 0.2138516| 0.0783208|\n|C     | 0.1956327| 0.0564806|\n|D     | 0.1949773| 0.0385781|\n|NA    | 0.0962092|        NA|\n\n\n:::\n:::\n",
    "supporting": [
      "Intro_to_Cloud_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}