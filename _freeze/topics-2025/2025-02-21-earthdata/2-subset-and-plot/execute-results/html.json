{
  "hash": "67905adb232ff4b7ec5cd4cac7ae27c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Subset and Plot\nauthor: Eli Holmes\n---\n\n\n\n::: {.callout-note title=\"Learning Objectives\"}\n1.  How to crop a single data file\n2.  How to create a data cube with `terra`\n3.  How to crop a data cube to a box\n:::\n\n## Summary\n\nIn this example, we will utilize the `earthdatalogin` R package to retrieve, subset, and crop sea surface temperature data as a file and as a datacube from [NASA Earthdata search](https://search.earthdata.nasa.gov/search). The `earthdatalogin` R package simplifies the process of discovering and accessing NASA Earth science data. We manipulate with the [terra](https://rspatial.github.io/terra/) package. terra is a very versatile package and we are just scratching the surface. Read more about terra [here](https://rspatial.org/spatial/index.html).\n\nFor more on `earthdatalogin` visit the [`earthdatalogin` GitHub](https://github.com/boettiger-lab/earthdatalogin/) page and/or the [`earthdatalogin` documentation](https://boettiger-lab.github.io/earthdatalogin/) site. Be aware that `earthdatalogin` is under active development and that we are using the development version on GitHub.\n\n## Prerequisites\n\nThe tutorial can be run with the guest Earthdata Login that is in `earthdatalogin`. However, if you will be using the NASA Earthdata portal more regularly, please register for an Earthdata Login account. Please <https://urs.earthdata.nasa.gov> to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\nSee the [1-earthdatalogin](1-earthdatalogin.html) tutorial for set-up if you are running the tutorial locally.\n\n## Load Required Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(earthdatalogin)\nlibrary(lubridate)\nlibrary(terra)\n```\n:::\n\n\n\nAuthenticate to NASA Earthdata.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nearthdatalogin::edl_netrc() \n```\n:::\n\n\n\n## Get a vector of urls to our nc files\n\nGet the urls. The `results` object is a vector of urls pointing to our `netCDF` files in the cloud. Each `netCDF` file is circa 670Mb.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshort_name <- 'MUR-JPL-L4-GLOB-v4.1'\nbbox <- c(xmin=-75.5, ymin=33.5, xmax=-73.5, ymax=35.5) \ntbox <- c(\"2020-01-16\", \"2020-12-16\")\n\nresults <- earthdatalogin::edl_search(\n  short_name = short_name,\n  version = \"4.1\",\n  temporal = tbox, \n  bounding_box = paste(bbox,collapse=\",\")\n)\nlength(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 336\n```\n\n\n:::\n\n```{.r .cell-code}\nresults[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20200116090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc\"\n[2] \"https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20200117090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc\"\n[3] \"https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20200118090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc\"\n```\n\n\n:::\n:::\n\n\n\n## Crop and plot one netCDF file\n\nEach MUR SST `netCDF` file is large so I do not want to download. Instead I will use `terra::rast()` to do subset the data on the server side. `vsi = TRUE` is letting function know that these are files in the cloud and to use GDAL functionality for that type of resource.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nras <- terra::rast(results[1], vsi=TRUE)\n```\n:::\n\n\n\n*Getting errors? Scroll below to the troubleshooting section.*\n\nCrop to a very small region. Note order of terms is different than in bbox!!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ne <- terra::ext(c(xmin=-75.5, xmax=-73.5,  ymin=33.5, ymax=35.5 ))\nrc <- terra::crop(ras, e)\nrc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 200, 200, 6  (nrow, ncol, nlyr)\nresolution  : 0.01, 0.01  (x, y)\nextent      : -75.495, -73.495, 33.505, 35.505  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource(s)   : memory\nnames       : analysed_sst, analy~error, mask, sea_i~ction, dt_1km_data, sst_anomaly \nmin values  :      290.656,        0.37,    1,        1.28,         128,       0.410 \nmax values  :      298.954,        0.40,    2,        1.28,         128,       3.585 \ntime        : 2020-01-16 09:00:00 UTC \n```\n\n\n:::\n:::\n\n\n\nPlot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(rc[[c(1, 2)]])\n```\n\n::: {.cell-output-display}\n![](2-subset-and-plot_files/figure-html/plot_MUR-1.png){width=672}\n:::\n:::\n\n\n\n## Crop and plot multiple netCDF files\n\nWe can send multiple urls to `terra`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nras_all <- terra::rast(results[c(1:4)], vsi = TRUE)\nras_all\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 17999, 36000, 24  (nrow, ncol, nlyr)\nresolution  : 0.01, 0.01  (x, y)\nextent      : -179.995, 180.005, -89.995, 89.995  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsources     : 20200116090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc:analysed_sst  \n              20200116090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc:analysis_error  \n              20200116090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc:mask  \n              ... and 21 more source(s)\nvarnames    : analysed_sst (analysed sea surface temperature) \n              analysis_error (estimated error standard deviation of analysed_sst) \n              mask (sea/land field composite mask) \n              ...\nnames       : analysed_sst, analy~error, mask, sea_i~ction, dt_1km_data, sst_anomaly, ... \nunit        :       kelvin,      kelvin,     ,            ,       hours,      kelvin, ... \ntime        : 2020-01-16 09:00:00 to 2020-01-19 09:00:00 UTC \n```\n\n\n:::\n:::\n\n\n\nCrop to a small extent. Note order of terms is different than in bbox! Since we will only plot sst for this example, it is faster to first select our variable of interest.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ne <- terra::ext(c(xmin=-75.5, xmax=-73.5,  ymin=33.5, ymax=35.5 ))\nras_sst <- ras_all[\"analysed_sst\",]\nrc_sst <- terra::crop(ras_sst, e)\nrc_sst\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 200, 200, 4  (nrow, ncol, nlyr)\nresolution  : 0.01, 0.01  (x, y)\nextent      : -75.495, -73.495, 33.505, 35.505  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource(s)   : memory\nvarname     : analysed_sst (analysed sea surface temperature) \nnames       : analysed_sst, analysed_sst, analysed_sst, analysed_sst \nmin values  :      290.656,      290.316,      289.456,      289.216 \nmax values  :      298.954,      298.869,      298.662,      298.119 \nunit        :       kelvin,       kelvin,       kelvin,       kelvin \ntime        : 2020-01-16 09:00:00 to 2020-01-19 09:00:00 UTC \n```\n\n\n:::\n:::\n\n\n\nConvert Kelvin to Celsius.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrc_sst <- rc_sst - 273.15\n```\n:::\n\n\n\nNow plot. We will set the range so it is the same across plots and clean up the titles to be just day without time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitles <- terra::time(x = rc_sst) |> lubridate::date() |> as.character()\nplot(rc_sst, \n     range = c(16, 26),\n     main = titles)\n```\n\n::: {.cell-output-display}\n![](2-subset-and-plot_files/figure-html/plot_four_MUR-1.png){width=672}\n:::\n:::\n\n\n\n## Conclusions\n\nSome really cool things just happened here! You connected to multiple remote-sensing files (`netCDF`) in the cloud and worked with them without directly downloading them.\n",
    "supporting": [
      "2-subset-and-plot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}