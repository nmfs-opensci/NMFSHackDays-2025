{
  "hash": "440c804e6eaa1d9ddd83018ca461577c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Extract data within a boundary\nauthor: NOAA CoastWatch modifications by NMFS Openscapes\n---\n\n\n\n::: {.callout-note title=\"Learning Objectives\"}\n1.  How to access and download sea surface temperature from NASA Earthdata\n2.  How to apply shapefiles as masks to satellite data\n3.  How to compute monthly average sea surface temperature\n:::\n\n## Summary\n\nIn this example, we will utilize the `earthdatalogin` R package to retrieve sea surface temperature data from [NASA Earthdata search](https://search.earthdata.nasa.gov/search). The `earthdatalogin` R package simplifies the process of discovering and accessing NASA Earth science data.\n\nThis example is adapted from the NOAA CoastWatch Satellite Data Tutorials. To explore the full range of tutorials on accessing and utilizing oceanographic satellite data, visit the [NOAA CoastWatch Tutorial Github repository.](https://github.com/coastwatch-training/CoastWatch-Tutorials)\n\nFor more on `earthdatalogin` visit the [`earthdatalogin` GitHub](https://github.com/boettiger-lab/earthdatalogin/) page and/or the [`earthdatalogin` documentation](https://boettiger-lab.github.io/earthdatalogin/) site. Be aware that `earthdatalogin` is under active development and that we are using the development version on GitHub.\n\n## Terminology\n\n-   **`shapefiles`**: is a simple, nontopological format for storing the geometric location and attribute information of geographic features. Geographic features in a shapefile can be represented by points, lines, or polygons (areas). Learn more [here](https://desktop.arcgis.com/en/arcmap/latest/manage-data/shapefiles/what-is-a-shapefile.htm).\n\n## Prerequisites\n\nThe tutorials today can be run with the guest Earthdata Login that is in `earthdatalogin`. However, if you will be using the NASA Earthdata portal more regularly, please register for an Earthdata Login account. Please <https://urs.earthdata.nasa.gov> to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n### Import Required Packages\n\nSee the [1-earthdatalogin](1-earthdatalogin.html) tutorial for set-up if you are running the tutorial locally.\n\n*Note: Be aware that getting it is common to run into trouble getting GDAL set up properly to handle netCDF files. Using a Docker image (and Python) is often less aggravating.*\n\n## Datasets\n\n**GHRSST Level 4 AVHRR_OI Global Blended Sea Surface Temperature Analysis (GDS2) from NCEI**\\\nThis NOAA blended SST is a moderate resolution satellite-based gap-free sea surface temperature (SST) product. We will use the daily data. https://cmr.earthdata.nasa.gov/search/concepts/C2036881712-POCLOUD.html\n\n**Longhurst Marine Provinces**\\\nThe dataset represents the division of the world oceans into provinces as defined by Longhurst (1995; 1998; 2006). This division has been based on the prevailing role of physical forcing as a regulator of phytoplankton distribution.\n\nThe Longhurst Marine Provinces dataset is available online (https://www.marineregions.org/downloads.php) and within the shapes folder associated with this repository. For this exercise we will use the Gulf Stream province (`ProvCode: GFST`)\n\n![](../images/longhurst.png)\n\n## Load packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\nlibrary(earthdatalogin)\nlibrary(sf)\nlibrary(ggplot2)\n```\n:::\n\n\n\n## Load boundary coordinates\n\nThe shapefile for the Longhurst marine provinces includes a list of regions.\\\nFor this exercise, we will only use the boundary of one province, the Gulf Stream region (\"GFST\").\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set directory path for shapefile\ndir_path <- '../resources/longhurst_v4_2010/'\n\n# Import shape files (Longhurst coordinates)\nshapes <- read_sf(dsn = dir_path, layer = \"Longhurst_world_v4_2010\")\n\n# Example List of all the province names\nshapes$ProvCode\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"BPLR\" \"ARCT\" \"SARC\" \"NADR\" \"GFST\" \"NASW\" \"NATR\" \"WTRA\" \"ETRA\" \"SATL\"\n[11] \"NECS\" \"CNRY\" \"GUIN\" \"GUIA\" \"NWCS\" \"MEDI\" \"CARB\" \"NASE\" \"BRAZ\" \"FKLD\"\n[21] \"BENG\" \"MONS\" \"ISSG\" \"EAFR\" \"REDS\" \"ARAB\" \"INDE\" \"INDW\" \"AUSW\" \"BERS\"\n[31] \"PSAE\" \"PSAW\" \"KURO\" \"NPPF\" \"NPSW\" \"TASM\" \"SPSG\" \"NPTG\" \"PNEC\" \"PEQD\"\n[41] \"WARM\" \"ARCH\" \"ALSK\" \"CCAL\" \"CAMR\" \"CHIL\" \"CHIN\" \"SUND\" \"AUSE\" \"NEWZ\"\n[51] \"SSTC\" \"SANT\" \"ANTA\" \"APLR\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get boundary coordinates for Gulf Stream region (GFST)\nGFST <- shapes[shapes$ProvCode == \"GFST\",]\n\nxcoord <- st_coordinates(GFST)[,1]\nycoord <- st_coordinates(GFST)[,2]\n```\n:::\n\n\n\n## Search data from NASA Earthdata with the dataset unique name and coordinates/dates\n\nFirst, connect to NASA Earthdata with no credentials\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nearthdatalogin::edl_netrc()\n```\n:::\n\n\n\nThen, define your search and cropping criteria\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dataset unique name\nshort_name <- 'AVHRR_OI-NCEI-L4-GLOB-v2.1'\n\n# Set boundaries based on the shapefile\nbbox <- c(xmin=min(xcoord), ymin=min(ycoord), xmax=max(xcoord), ymax=max(ycoord)) \n\n# Set time range\ntbox <- c(\"2020-01-01\", \"2020-12-31\")\n\n# Search data that match the boundaries and time range\nresults <- edl_search(\n  short_name = short_name,\n  version = \"2.1\",\n  temporal = tbox,\n  bounding_box = paste(bbox, collapse = \",\")\n)\n\n# Check number of files \nlength(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 367\n```\n\n\n:::\n:::\n\n\n\nThere are 367 files.\n\n## Apply shapefiles as mask to satellite data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select the first result\nras <- terra::rast(results[1], vsi = TRUE)\n\n# Extract SST from the multi-layer raster data\nras_sst <- ras[[\"analysed_sst\"]]\n```\n:::\n\n\n\nConvert shape to SpatVector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vectorize shapes\nshp <- terra::vect(shapes)\n\n# Get boundaries for GFST\nGFST <- shp[shp$ProvCode == \"GFST\",]\n```\n:::\n\n\n\nPlot the SST data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ras_sst)\n```\n\n::: {.cell-output-display}\n![](3-extract-satellite-data-within-boundary_files/figure-html/plot_SST-1.png){width=672}\n:::\n:::\n\n\n\nPlot GFST boundaries from shapefile.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(GFST,col='red')\n```\n\n::: {.cell-output-display}\n![](3-extract-satellite-data-within-boundary_files/figure-html/plot_GFST-1.png){width=672}\n:::\n:::\n\n\n\nMask SST with the GFST boundaries and plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmasked_rc <- mask(ras_sst, GFST)\n\n# Visualize the SST in GFST Province and crop to the GFST extent\nplot(masked_rc, ext = GFST)\n```\n\n::: {.cell-output-display}\n![](3-extract-satellite-data-within-boundary_files/figure-html/mask_SST-1.png){width=672}\n:::\n:::\n\n\n\n## Compute monthly average of SST\n\nWe will construct a data cube to compute monthly average for sea surface temperature data within the boundary. To minimize data loading times, the first 10 results, which correspond to approximately two months of data, will be used for this exercise.\n\nSelect the 10 SST results (end of January and beginning of February).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nras_all <- terra::rast(results[30:40], vsi = TRUE)\n```\n:::\n\n\n\nSelect SST data. The trim and mask operations are memory intensive and we want to select only the layer we will be working with.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrc_sst <- ras_all[\"analysed_sst\",]\n```\n:::\n\n\n\nCrop to the GFST boundaries.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrc_sst <- terra::crop(rc_sst, GFST)\n```\n:::\n\n\n\nTrim the SST data to the boundaries of GFST.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrc_sst <- terra::mask(rc_sst, GFST)\n```\n:::\n\n\n\nCalculate mean SST over the entire time series and map it\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute mean over 12 time layers\nraster_mean <- terra::mean(rc_sst, na.rm=TRUE)\n\n# Map mean SST \nplot(raster_mean)\n```\n\n::: {.cell-output-display}\n![](3-extract-satellite-data-within-boundary_files/figure-html/get_means-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Map only the GFST area\nplot(terra::crop(raster_mean, GFST))\n```\n:::\n\n\n\nCalculate monthly mean SST means across raster (lat, lon).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to convert times to year-month format\nyear_month <- function(x) {\n  format(as.Date(time(x), format=\"%Y-%m-%d\"), \"%Y-%m\")\n}\n\n# Format time to Year-month for monthly aggregation \nym <- year_month(rc_sst)\n\n# Compute raster mean grouped by Year-month\nmonthly_mean_rast <- terra::tapp(rc_sst, ym, fun = mean)\n\n# Compute mean across raster grouped by Year-month\nmonthly_means <- terra::global(monthly_mean_rast, fun = mean, na.rm=TRUE)\n```\n:::\n\n\n\n## Convert raster into data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert raster into data.frame\nmonthly_means_df <- as.data.frame(monthly_means)\n\n# Convert year_month to a column\nmonthly_means_df$year_month <- sub(\"X\", \"\", rownames(monthly_means_df))\n```\n:::\n\n\n\n## Plot monthly mean of sea surface temperature within GFST province\n\nYou will only see 2 points since we loaded only 10 days of data (end of January and beginning of February).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = monthly_means_df, aes(x = year_month, y = mean, group = 1)) +\n  geom_line() +\n  geom_point() +\n  xlab(\"Year.Month\") + \n  ylab(\"Mean SST (F)\")\n```\n\n::: {.cell-output-display}\n![](3-extract-satellite-data-within-boundary_files/figure-html/plot_monthly_mean-1.png){width=672}\n:::\n:::\n\n\n\n## Troubleshooting\n\n::: {.callout-note title=\"Troubleshooting\"}\nIf you get the following error:\n\n> Warning: Opening a /vsi file with the netCDF driver requires Linux userfaultfd to be available. Or you may set the GDAL_SKIP=netCDF configuration option to force the use of the HDF5 driver. (GDAL error 1)Error: \\[rast\\] file does not exist: /vsicurl/https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/AVHRR_OI-NCEI-L4-GLOB-v2.1/20191231120000-NCEI-L4_GHRSST-SSTblend-AVHRR_OI-GLOB-v02.0-fv02.1.nc\n\nThen go back and run the authentication code at the top.\n:::\n",
    "supporting": [
      "3-extract-satellite-data-within-boundary_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}