{
  "hash": "814dc9bd6fa2888b2b630d57af8129cd",
  "result": {
    "markdown": "---\ntitle: \"Intro to earthdataaccess\"\nauthor: Carl Boettiger\n---\n\n\nThis is the \"[Data Cubes with STAC](https://boettiger-lab.github.io/earthdatalogin/articles/gdalcubes-stac-cog.html)\" vignette from [earthdataaccess package](https://boettiger-lab.github.io/earthdatalogin).\n\nHigh-resolution satellites generate many snapshot images each with a limited field of view or spatial extent.  In order to see a larger area in space, and/or observe changes across space and time, we need to assemble these many snapshots into a mosaic or \"data cube\" that we can analyze as a cohesive whole. \n\n\n[EARTHDATA STAC CATALOGS](https://radiantearth.github.io/stac-browser/#/external/cmr.earthdata.nasa.gov/stac/)\n\n## Install earthdatalogin\n\nInstall earthdatalogin and update terra\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"earthdatalogin\")\ninstall.packages(\"terra\")\n```\n:::\n\n\n## Basic Use\n\nFirst let's get [NASA Earth Data Login](https://urs.earthdata.nasa.gov/) (EDL) authentication out of the way. For cloud data from almost any other STAC catalog (NOAA, USGS, Planetary Computer, etc), authentication is either unnecessary or already provided by the STAC API, but NASA EDL is special. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(earthdatalogin)\n# Authenticate\nedl_netrc()\n```\n:::\n\n\nGet data.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.65\n```\n:::\n\n```{.r .cell-code}\nurl <- \"https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/HLSL30.020/HLS.L30.T56JKT.2023246T235950.v2.0/HLS.L30.T56JKT.2023246T235950.v2.0.SAA.tif\"\nras <- terra::rast(url, vsi=TRUE)\n```\n:::\n\nThis is a boring and weird example. The plot is correct.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ras)\n```\n\n::: {.cell-output-display}\n![](earthdataaccess_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Searching and Subsetting\n\n\nThe packages we want\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rstac)\nlibrary(gdalcubes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'gdalcubes'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:terra':\n\n    animate, crop, size\n```\n:::\n\n```{.r .cell-code}\ngdalcubes_options(parallel = TRUE) \n```\n:::\n\n\n\n### EDL Authentication\n\nAs usual, we can handle this with `edl_netrc()`.  Because the `gdalcubes` package doesn't respect global environmental variables, we use a helper utility to export those into its configuration as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(earthdatalogin)\nedl_netrc()\nwith_gdalcubes()\n```\n:::\n\n\n### Search via STAC\n\nWe will now use the `rstac` package to search one or more NASA collections for data that falls into our desired bounding box of space and time. NASA has a CMR option for searching that is more stable but this example is using STAC which is a more universal option.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbox <- c(xmin=-123, ymin=37.25, xmax=-122.0, ymax=38.25) \nstart <- \"2021-12-01\"\nend <- \"2022-01-31\"\n\n# Find all assets from the desired catalog:\nitems <- stac(\"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\") |> \n  stac_search(collections = \"HLSL30.v2.0\",\n              bbox = bbox,\n              datetime = paste(start,end, sep = \"/\")) |>\n  post_request() |>\n  items_fetch() |>\n  items_filter(filter_fn = \\(x) {x[[\"eo:cloud_cover\"]] < 20})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: In version 0.9.2, rstac changed how filter function is evaluated. In future versions, the `filter_fn` parameter will be evaluated against each feature in items instead of `properties` field.\nSee ?items_filter for more details on how to change your function.\n```\n:::\n:::\n\n\n\nNote that 98 features have matched our search criteria! Each feature represents a 'snapshot' image taken by the satellite as it passes by (this is a harmonized product so actually there's quite a lot of post-processing.)  Each feature thus shares the same bounding box, projection, and timestamp, but may consist of many different 'assets', different files representing the different spectral bands on the satellite camera instrument.  Each feature can potentially include quite extensive metadata about the feature, including details of instrument itself or from post-processing, such as cloud cover.  Unfortunately, Earth Data's STAC metadata tends to be quite sparse. \n\n\n### Building a Data Cube\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Desired data cube shape & resolution\nv = cube_view(srs = \"EPSG:4326\",\n              extent = list(t0 = as.character(start), \n                            t1 = as.character(end),\n                            left = bbox[1], right = bbox[3],\n                            top = bbox[4], bottom = bbox[2]),\n              nx = 512, ny = 512, dt = \"P1M\")\n```\n:::\n\n\nRGB bands + cloud cover mask\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- stac_image_collection(items$features, \n                             asset_names = c(\"B02\", \"B03\", \"B04\", \"Fmask\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in stac_image_collection(items$features, asset_names = c(\"B02\", : STAC\nasset with name 'B02' does not include eo:bands metadata and will be considered\nas a single band source\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in stac_image_collection(items$features, asset_names = c(\"B02\", : STAC\nasset with name 'B03' does not include eo:bands metadata and will be considered\nas a single band source\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in stac_image_collection(items$features, asset_names = c(\"B02\", : STAC\nasset with name 'B04' does not include eo:bands metadata and will be considered\nas a single band source\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in stac_image_collection(items$features, asset_names = c(\"B02\", : STAC\nasset with name 'Fmask' does not include eo:bands metadata and will be\nconsidered as a single band source\n```\n:::\n:::\n\n\nUse a cloud mask. See [HLS User Guide](https://lpdaac.usgs.gov/documents/1326/HLS_User_Guide_V2.pdf).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncloud_mask <- image_mask(\"Fmask\", values=1)\n```\n:::\n\n\n### Plot\n\nThis takes awhile. So far we have not downloaded anything. We have been working with metadata about the files. Now we do the work which involves server-side subsetting and some operations. We download on the part that we need.\n\n::: {.cell}\n\n```{.r .cell-code}\nraster_cube(col, v, mask=cloud_mask) |>\n  select_bands(c(\"B02\",\"B03\", \"B04\")) |>\n  plot(rgb=3:1)\n```\n\n::: {.cell-output-display}\n![](earthdataaccess_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "earthdataaccess_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}