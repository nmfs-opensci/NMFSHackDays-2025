---
title: Introduction to Geospatial Analyses in R in the Cloud
author: Carl Boettiger and adapted by Eli Holmes
---

This is based on the "Examining Environmental Justice through Open Source, Cloud-Native Tools" notebook from Carl Boettiger. Please follow [Carl's notebook](https://boettiger-lab.github.io/nasa-topst-env-justice/tutorials/R/1-intro-R.html) for the background. This tutorial just focuses on the code.

## Set up

You will need to install the newest version of tmap. Restart R a few times after installing. You don't need to update other packages.
```{r eval=FALSE}
remotes::install_github('r-tmap/tmap')
```

```{r}
#| message=FALSE
library(rstac)
library(gdalcubes)
library(stars)
library(tmap)
library(dplyr)
gdalcubes::gdalcubes_options(parallel = TRUE)
```

## Data discovery

Here we use a [STAC](https://stacspec.org/en) Catalog API to recover a list of candidate data. 
This example searches for images in a lon-lat bounding box from a collection of Cloud-Optimized-GeoTIFF (COG) images taken by Sentinel2 satellite mission. This function will not download any imagery, it merely gives us a list of metadata about available images.

```{r}
#| message=FALSE
box <- c(xmin=-122.51, ymin=37.71, xmax=-122.36, ymax=37.81) 
start_date <- "2022-06-01"
end_date <- "2022-08-01"
items <-
  stac("https://earth-search.aws.element84.com/v0/") |>
  stac_search(collections = "sentinel-s2-l2a-cogs",
              bbox = box,
              datetime = paste(start_date, end_date, sep="/"),
              limit = 100) |>
  ext_query("eo:cloud_cover" < 20) |>
  post_request()
```

We pass this list of images to a high-level utilty (`gdalcubes`) that will do all of the heavy lifting:

* subsetting by date
* subsetting by bounding box
* aggregating by time `P1D`
* reproject into the desired coordinate system
* resampling to a desired spatial resolution
* resample from images in overlapping areas to replace pixels masked by clouds


```{r}
#| message=FALSE, warning=FALSE
col <- stac_image_collection(items$features, asset_names = c("B08", "B04", "SCL"))

cube <- cube_view(srs ="EPSG:4326",
                  extent = list(t0 = start_date, t1 = end_date,
                                left = box[1], right = box[3],
                                top = box[4], bottom = box[2]),
                  dx = 0.0001, dy = 0.0001, dt = "P1D",
                  aggregation = "median", resampling = "average")

mask <- image_mask("SCL", values=c(3, 8, 9)) # mask clouds and cloud shadows

data <-  raster_cube(col, cube, mask = mask)
```


Calculate NDVI, a widely used measure of greenness that can be used to determine tree cover. The R example uses lazy evaluation, and can thus perform these calculations while streaming.

```{r}
#| message=FALSE
ndvi <- data |>
  select_bands(c("B04", "B08")) |>
  apply_pixel("(B08-B04)/(B08+B04)", "NDVI") |>
  reduce_time(c("mean(NDVI)"))

ndvi_stars <- st_as_stars(ndvi)
```


Plot the result.  The long rectangle of Golden Gate Park is clearly visible in the North-West.

```{r}
#| message = FALSE, warning = FALSE
mako <- tm_scale_continuous(values = viridisLite::mako(30))
fill <- tm_scale_continuous(values = "Greens")

tm_shape(ndvi_stars) + tm_raster(col.scale = mako)
```

# From NDVI to Environmental Justice

Add the 1937 "red-lining" zones from the [Mapping Inequality](https://dsl.richmond.edu/panorama/redlining) project.  The red-lined zones are spatial vectors. 


```{r}
#| message = FALSE, results="hide"
sf <- st_read("/vsicurl/https://dsl.richmond.edu/panorama/redlining/static/citiesData/CASanFrancisco1937/geojson.json") |>
  st_make_valid() |>
  select(grade)
poly <- ndvi |> extract_geom(sf, FUN = mean, reduce_time = TRUE)
sf$NDVI <- poly$NDVI
```

We plot the underlying NDVI as well as the average NDVI of each polygon, along with it's textual grade, using `tmap`. 


```{r}
#| message = FALSE, warning = FALSE
tm_shape(ndvi_stars) + tm_raster(col.scale = mako) +
  tm_shape(sf) + tm_polygons('NDVI', fill.scale = fill) +
  tm_shape(sf) + tm_text("grade", col="darkblue", size=0.6) +
  tm_legend_hide()
```

Calculate the mean current greenness by red-line zone grade.

```{r}
sf |> 
  as_tibble() |>
  group_by(grade) |> 
  summarise(ndvi = mean(NDVI), 
            sd = sd(NDVI)) |>
  knitr::kable()
```


